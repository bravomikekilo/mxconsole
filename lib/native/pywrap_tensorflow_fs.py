# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrap_tensorflow_fs', [dirname(__file__)])
        except ImportError:
            import _pywrap_tensorflow_fs
            return _pywrap_tensorflow_fs
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrap_tensorflow_fs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrap_tensorflow_fs = swig_import_helper()
    del swig_import_helper
else:
    import _pywrap_tensorflow_fs
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class PyRecordReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyRecordReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyRecordReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _pywrap_tensorflow_fs.PyRecordReader_New
    if _newclass:
        New = staticmethod(_pywrap_tensorflow_fs.PyRecordReader_New)
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_PyRecordReader
    __del__ = lambda self: None

    def GetNext(self, status):
        return _pywrap_tensorflow_fs.PyRecordReader_GetNext(self, status)

    def record(self):
        return _pywrap_tensorflow_fs.PyRecordReader_record(self)

    def offset(self):
        return _pywrap_tensorflow_fs.PyRecordReader_offset(self)

    def Close(self):
        return _pywrap_tensorflow_fs.PyRecordReader_Close(self)
PyRecordReader_swigregister = _pywrap_tensorflow_fs.PyRecordReader_swigregister
PyRecordReader_swigregister(PyRecordReader)

def PyRecordReader_New(filename, start_offset, compression_type_string, out_status):
    return _pywrap_tensorflow_fs.PyRecordReader_New(filename, start_offset, compression_type_string, out_status)
PyRecordReader_New = _pywrap_tensorflow_fs.PyRecordReader_New

class PyRecordWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyRecordWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyRecordWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _pywrap_tensorflow_fs.PyRecordWriter_New
    if _newclass:
        New = staticmethod(_pywrap_tensorflow_fs.PyRecordWriter_New)
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_PyRecordWriter
    __del__ = lambda self: None

    def WriteRecord(self, record):
        return _pywrap_tensorflow_fs.PyRecordWriter_WriteRecord(self, record)

    def Close(self):
        return _pywrap_tensorflow_fs.PyRecordWriter_Close(self)
PyRecordWriter_swigregister = _pywrap_tensorflow_fs.PyRecordWriter_swigregister
PyRecordWriter_swigregister(PyRecordWriter)

def PyRecordWriter_New(filename, compression_type_string, out_status):
    return _pywrap_tensorflow_fs.PyRecordWriter_New(filename, compression_type_string, out_status)
PyRecordWriter_New = _pywrap_tensorflow_fs.PyRecordWriter_New


def TF_NewStatus():
    return _pywrap_tensorflow_fs.TF_NewStatus()
TF_NewStatus = _pywrap_tensorflow_fs.TF_NewStatus

def TF_DeleteStatus(arg1):
    return _pywrap_tensorflow_fs.TF_DeleteStatus(arg1)
TF_DeleteStatus = _pywrap_tensorflow_fs.TF_DeleteStatus

def TF_GetCode(s):
    return _pywrap_tensorflow_fs.TF_GetCode(s)
TF_GetCode = _pywrap_tensorflow_fs.TF_GetCode

def TF_Message(s):
    return _pywrap_tensorflow_fs.TF_Message(s)
TF_Message = _pywrap_tensorflow_fs.TF_Message

def FileExists(filename, out_status):
    return _pywrap_tensorflow_fs.FileExists(filename, out_status)
FileExists = _pywrap_tensorflow_fs.FileExists

def DeleteFile(filename, out_status):
    return _pywrap_tensorflow_fs.DeleteFile(filename, out_status)
DeleteFile = _pywrap_tensorflow_fs.DeleteFile

def ReadFileToString(filename, out_status):
    return _pywrap_tensorflow_fs.ReadFileToString(filename, out_status)
ReadFileToString = _pywrap_tensorflow_fs.ReadFileToString

def WriteStringToFile(filename, file_content, out_status):
    return _pywrap_tensorflow_fs.WriteStringToFile(filename, file_content, out_status)
WriteStringToFile = _pywrap_tensorflow_fs.WriteStringToFile

def GetChildren(dir, out_status):
    return _pywrap_tensorflow_fs.GetChildren(dir, out_status)
GetChildren = _pywrap_tensorflow_fs.GetChildren

def GetMatchingFiles(filename, out_status):
    return _pywrap_tensorflow_fs.GetMatchingFiles(filename, out_status)
GetMatchingFiles = _pywrap_tensorflow_fs.GetMatchingFiles

def CreateDir(dirname, out_status):
    return _pywrap_tensorflow_fs.CreateDir(dirname, out_status)
CreateDir = _pywrap_tensorflow_fs.CreateDir

def RecursivelyCreateDir(dirname, out_status):
    return _pywrap_tensorflow_fs.RecursivelyCreateDir(dirname, out_status)
RecursivelyCreateDir = _pywrap_tensorflow_fs.RecursivelyCreateDir

def CopyFile(oldpath, newpath, overwrite, out_status):
    return _pywrap_tensorflow_fs.CopyFile(oldpath, newpath, overwrite, out_status)
CopyFile = _pywrap_tensorflow_fs.CopyFile

def RenameFile(oldname, newname, overwrite, out_status):
    return _pywrap_tensorflow_fs.RenameFile(oldname, newname, overwrite, out_status)
RenameFile = _pywrap_tensorflow_fs.RenameFile

def DeleteRecursively(dirname, out_status):
    return _pywrap_tensorflow_fs.DeleteRecursively(dirname, out_status)
DeleteRecursively = _pywrap_tensorflow_fs.DeleteRecursively

def IsDirectory(dirname, out_status):
    return _pywrap_tensorflow_fs.IsDirectory(dirname, out_status)
IsDirectory = _pywrap_tensorflow_fs.IsDirectory

def Stat(filename, stats, out_status):
    return _pywrap_tensorflow_fs.Stat(filename, stats, out_status)
Stat = _pywrap_tensorflow_fs.Stat

def CreateBufferedInputStream(filename, buffer_size, out_status):
    return _pywrap_tensorflow_fs.CreateBufferedInputStream(filename, buffer_size, out_status)
CreateBufferedInputStream = _pywrap_tensorflow_fs.CreateBufferedInputStream

def CreateWritableFile(filename, mode, out_status):
    return _pywrap_tensorflow_fs.CreateWritableFile(filename, mode, out_status)
CreateWritableFile = _pywrap_tensorflow_fs.CreateWritableFile

def AppendToFile(file_content, file, out_status):
    return _pywrap_tensorflow_fs.AppendToFile(file_content, file, out_status)
AppendToFile = _pywrap_tensorflow_fs.AppendToFile

def ReadFromStream(stream, bytes, out_status):
    return _pywrap_tensorflow_fs.ReadFromStream(stream, bytes, out_status)
ReadFromStream = _pywrap_tensorflow_fs.ReadFromStream
class Status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Status, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_Status
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pywrap_tensorflow_fs.new_Status(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["OK"] = lambda x: _pywrap_tensorflow_fs.Status_OK
    if _newclass:
        OK = staticmethod(_pywrap_tensorflow_fs.Status_OK)

    def ok(self):
        return _pywrap_tensorflow_fs.Status_ok(self)

    def code(self):
        return _pywrap_tensorflow_fs.Status_code(self)

    def error_message(self):
        return _pywrap_tensorflow_fs.Status_error_message(self)

    def __eq__(self, x):
        return _pywrap_tensorflow_fs.Status___eq__(self, x)

    def __ne__(self, x):
        return _pywrap_tensorflow_fs.Status___ne__(self, x)

    def Update(self, new_status):
        return _pywrap_tensorflow_fs.Status_Update(self, new_status)

    def ToString(self):
        return _pywrap_tensorflow_fs.Status_ToString(self)

    def IgnoreError(self):
        return _pywrap_tensorflow_fs.Status_IgnoreError(self)
Status_swigregister = _pywrap_tensorflow_fs.Status_swigregister
Status_swigregister(Status)

def Status_OK():
    return _pywrap_tensorflow_fs.Status_OK()
Status_OK = _pywrap_tensorflow_fs.Status_OK


def __lshift__(os, x):
    return _pywrap_tensorflow_fs.__lshift__(os, x)
__lshift__ = _pywrap_tensorflow_fs.__lshift__
class WritableFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WritableFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WritableFile, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_WritableFile
    __del__ = lambda self: None

    def Close(self):
        return _pywrap_tensorflow_fs.WritableFile_Close(self)

    def Flush(self):
        return _pywrap_tensorflow_fs.WritableFile_Flush(self)
WritableFile_swigregister = _pywrap_tensorflow_fs.WritableFile_swigregister
WritableFile_swigregister(WritableFile)

class BufferedInputStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferedInputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferedInputStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_BufferedInputStream
    __del__ = lambda self: None

    def Tell(self):
        return _pywrap_tensorflow_fs.BufferedInputStream_Tell(self)

    def Seek(self, position):
        return _pywrap_tensorflow_fs.BufferedInputStream_Seek(self, position)

    def ReadLineAsString(self):
        return _pywrap_tensorflow_fs.BufferedInputStream_ReadLineAsString(self)
BufferedInputStream_swigregister = _pywrap_tensorflow_fs.BufferedInputStream_swigregister
BufferedInputStream_swigregister(BufferedInputStream)


def Set_TF_Status_from_Status(tf_status, status):
    return _pywrap_tensorflow_fs.Set_TF_Status_from_Status(tf_status, status)
Set_TF_Status_from_Status = _pywrap_tensorflow_fs.Set_TF_Status_from_Status

def IsAbsolutePath(path):
    return _pywrap_tensorflow_fs.IsAbsolutePath(path)
IsAbsolutePath = _pywrap_tensorflow_fs.IsAbsolutePath

def Dirname(path):
    return _pywrap_tensorflow_fs.Dirname(path)
Dirname = _pywrap_tensorflow_fs.Dirname

def Basename(path):
    return _pywrap_tensorflow_fs.Basename(path)
Basename = _pywrap_tensorflow_fs.Basename

def Extension(path):
    return _pywrap_tensorflow_fs.Extension(path)
Extension = _pywrap_tensorflow_fs.Extension

def CleanPath(path):
    return _pywrap_tensorflow_fs.CleanPath(path)
CleanPath = _pywrap_tensorflow_fs.CleanPath

def ParseURI(uri, scheme, host, path):
    return _pywrap_tensorflow_fs.ParseURI(uri, scheme, host, path)
ParseURI = _pywrap_tensorflow_fs.ParseURI

def CreateURI(scheme, host, path):
    return _pywrap_tensorflow_fs.CreateURI(scheme, host, path)
CreateURI = _pywrap_tensorflow_fs.CreateURI
class FileStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileStatistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _pywrap_tensorflow_fs.FileStatistics_length_set
    __swig_getmethods__["length"] = _pywrap_tensorflow_fs.FileStatistics_length_get
    if _newclass:
        length = _swig_property(_pywrap_tensorflow_fs.FileStatistics_length_get, _pywrap_tensorflow_fs.FileStatistics_length_set)
    __swig_setmethods__["mtime_nsec"] = _pywrap_tensorflow_fs.FileStatistics_mtime_nsec_set
    __swig_getmethods__["mtime_nsec"] = _pywrap_tensorflow_fs.FileStatistics_mtime_nsec_get
    if _newclass:
        mtime_nsec = _swig_property(_pywrap_tensorflow_fs.FileStatistics_mtime_nsec_get, _pywrap_tensorflow_fs.FileStatistics_mtime_nsec_set)
    __swig_setmethods__["is_directory"] = _pywrap_tensorflow_fs.FileStatistics_is_directory_set
    __swig_getmethods__["is_directory"] = _pywrap_tensorflow_fs.FileStatistics_is_directory_get
    if _newclass:
        is_directory = _swig_property(_pywrap_tensorflow_fs.FileStatistics_is_directory_get, _pywrap_tensorflow_fs.FileStatistics_is_directory_set)

    def __init__(self, *args):
        this = _pywrap_tensorflow_fs.new_FileStatistics(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pywrap_tensorflow_fs.delete_FileStatistics
    __del__ = lambda self: None
FileStatistics_swigregister = _pywrap_tensorflow_fs.FileStatistics_swigregister
FileStatistics_swigregister(FileStatistics)

# This file is compatible with both classic and new-style classes.


